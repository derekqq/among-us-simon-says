{"version":3,"sources":["slices/gameSlice.ts","store.ts","components/Wrapper/Wrapper.styles.ts","images/logo.svg","components/Wrapper/Wrapper.tsx","components/GameBoard/ResetButton/ResetButton.styles.ts","components/GameBoard/ResetButton/ResetButton.tsx","components/GameBoard/GameBoard.styles.ts","components/GameBoard/Box/Box.styles.ts","components/GameBoard/ProgressBar/ProgressBar.styles.ts","components/GameBoard/ProgressBar/ProgressBar.tsx","hooks/useKeyboard.ts","helpers/compareArray.ts","components/GameBoard/Box/Keyboard.tsx","hooks/useAnimeScreen.ts","helpers/animeScreen.ts","components/GameBoard/Box/Screen.tsx","components/GameBoard/Box/Winner.tsx","hooks/useWin.ts","components/GameBoard/GameBoard.tsx","pages/Game.tsx","images/background.png","theme/GlobalStyle.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["gameSlice","createSlice","name","initialState","isLaunched","totalRounds","currentRound","lastSuccessRound","isUserTurn","randomArray","userArray","isFailed","shouldChange","reducers","start","state","action","payload","reset","setTurn","userClick","push","success","fail","resetFailed","actions","selectIsUserTurn","game","selectIsLaunched","selectCurrentRound","selectTotalRounds","selectRandomArray","selectUserArray","selectIsFailed","selectShouldChange","store","configureStore","reducer","gameReducer","Container","styled","div","Logo","img","Header","h1","Wrapper","children","src","logo","Button","ResetButton","dispatch","useDispatch","onClick","BoxContainer","ScreenGrid","ScreenItem","KeyboardGrid","props","active","KeyboardItem","WinnerWrapper","WinnerHeader","p","ProgressGrid","ProgressItem","ProgressBar","useSelector","Array","map","x","index","useKeyboard","useEffect","delay","length","userArr","randArr","isValid","every","item","handleClick","i","e","Keyboard","useAnimeScreen","screenRef","useRef","current","currItem","delayTime","hideTime","style","background","removeAttribute","Screen","ref","useWin","isWin","Gameboard","Winner","Menu","lazy","Game","fallback","GameBoard","GlobalStyle","createGlobalStyle","App","className","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gIAAA,0gBAeMA,EAAYC,YAAY,CAC5BC,KAAM,OACNC,aAdoC,CACpCC,YAAY,EACZC,YAAa,EACbC,aAAc,EACdC,iBAAkB,EAClBC,YAAY,EACZC,YAAa,GACbC,UAAW,GACXC,UAAU,EACVC,cAAc,GAMdC,SAAU,CACRC,MAAO,SAACC,EAAOC,GACbD,EAAMX,YAAa,EACnBW,EAAMV,YAAcW,EAAOC,QAAQZ,YACnCU,EAAMN,YAAcO,EAAOC,QAAQR,aAErCS,MAAO,SAACH,GACNA,EAAMX,YAAa,EACnBW,EAAML,UAAY,GAClBK,EAAMT,aAAe,EACrBS,EAAMR,iBAAmB,GAE3BY,QAZQ,SAYAJ,EAAOC,GACbD,EAAMP,WAAaQ,EAAOC,SAE5BG,UAfQ,SAeEL,EAAOC,GACfD,EAAML,UAAUW,KAAKL,EAAOC,UAE9BK,QAAS,SAACP,GACRA,EAAMR,iBAAmBQ,EAAMT,aAC/BS,EAAMT,aAAeS,EAAMT,aAAe,EAC1CS,EAAMP,YAAa,EACnBO,EAAML,UAAY,IAEpBa,KAAM,SAACR,GACLA,EAAMT,aAAeS,EAAMR,iBAC3BQ,EAAMP,YAAa,EACnBO,EAAML,UAAY,GAClBK,EAAMJ,UAAW,EACjBI,EAAMH,aACJG,EAAMR,mBAAqBQ,EAAMT,cAAgBS,EAAMH,aAAeG,EAAMH,cAEhFY,YAAa,SAACT,GACZA,EAAMJ,UAAW,M,EAKyDX,EAAUyB,QAA3EX,E,EAAAA,MAAOI,E,EAAAA,MAAOC,E,EAAAA,QAASC,E,EAAAA,UAAWE,E,EAAAA,QAASC,E,EAAAA,KAAMC,E,EAAAA,YAEnDE,EAAmB,SAACX,GAAD,OAAoCA,EAAMY,KAAKnB,YAElEoB,EAAmB,SAACb,GAAD,OAAoCA,EAAMY,KAAKvB,YAElEyB,EAAqB,SAACd,GAAD,OAAoCA,EAAMY,KAAKrB,cACpEwB,EAAoB,SAACf,GAAD,OAAoCA,EAAMY,KAAKtB,aAEnE0B,EAAoB,SAAChB,GAAD,OAAoCA,EAAMY,KAAKlB,aACnEuB,EAAkB,SAACjB,GAAD,OAAoCA,EAAMY,KAAKjB,WAEjEuB,EAAiB,SAAClB,GAAD,OAAoCA,EAAMY,KAAKhB,UAChEuB,EAAqB,SAACnB,GAAD,OAAoCA,EAAMY,KAAKf,cAElEZ,MAAf,S,yGC9DemC,EANDC,YAAe,CAC3BC,QAAS,CACPV,KAAMW,O,igBCHH,IAAMC,EAAYC,IAAOC,IAAV,KAOTC,EAAOF,IAAOG,IAAV,KAKJC,EAASJ,IAAOK,GAAV,KCdJ,GDoBYL,IAAOG,IAAV,KCpBT,IAA0B,kCCe1BG,EAXW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,OACE,eAACR,EAAD,WACE,cAACG,EAAD,CAAMM,IAAKC,IACX,cAACL,EAAD,yBAECG,M,qVCRA,IAAMG,EAASV,IAAOC,IAAV,KCaJU,EAVe,WAC5B,IAAMC,EAAWC,cAMjB,OAAO,cAACH,EAAD,CAAQI,QAJM,WACnBF,EAASlC,gBAGJ,oB,wUCVF,IAAMqB,EAAYC,IAAOC,IAAV,KAQTK,EAAUN,YAAOD,EAAPC,CAAH,K,gyDCRb,IAAMe,EAAef,IAAOC,IAAV,KAaZe,EAAahB,IAAOC,IAAV,KAcVgB,EAAajB,IAAOC,IAAV,KAMViB,EAAelB,YAAOgB,EAAPhB,CAAH,KACL,SAACmB,GAAD,OAAYA,EAAMC,OAAS,OAAS,UAC5C,SAACD,GAAD,OAAYA,EAAMC,OAAS,UAAY,iBAKpC,SAACD,GAAD,OAAYA,EAAMhD,SAAW,QAAU,UACxC,SAACgD,GAAD,OAAYA,EAAMhD,SAAW,cAAgB,aAY9CkD,EAAerB,IAAOC,IAAV,KAcZqB,EAAgBtB,IAAOC,IAAV,KAObsB,EAAevB,IAAOwB,EAAV,K,+ZC1ElB,IAAMC,EAAezB,IAAOC,IAAV,KAWZyB,EAAe1B,IAAOC,IAAV,KACT,SAACkB,GAAD,OACZA,EAAMC,OACF,qEACA,2ECIOO,EAZuB,SAAC,GAAsB,IAApB7D,EAAmB,EAAnBA,aACjCD,EAAc+D,YAAYtC,KAEhC,OACE,cAACmC,EAAD,UACG,YAAII,MAAMhE,IAAciE,KAAI,SAACC,EAAGC,GAAJ,OAC3B,cAACN,EAAD,CAAcN,OAAQtD,EAAekE,EAAQ,GAAQ,eAAiBA,S,OCiC/DC,EA/BK,WAClB,IAAMrB,EAAWC,cACX3C,EAAY0D,YAAYpC,KACxBvB,EAAc2D,YAAYrC,KAC1BvB,EAAa4D,YAAY1C,KACzBpB,EAAe8D,YAAYvC,KAC3BlB,EAAWyD,YAAYnC,KAE7ByC,qBAAU,WACRC,iBAAM,kBAAMvB,EAAS5B,iBAAgB,QACpC,CAACb,IAEJ+D,qBAAU,WACR,GAAyB,IAArBhE,EAAUkE,OAAd,CACA,IC/ByBC,EAAmBC,ED+BtCC,GC/BsCD,ED+BJrE,GC/BfoE,ED+BInE,GC9BvBsE,OAAM,SAACC,EAAMT,GACnB,OAAOM,EAAQN,KAAWK,EAAQL,OD8BlCO,GAAW3B,EAAS7B,eAEpB6B,EAASjC,aAAQ,IAEbT,EAAUkE,OAAStE,GACvByE,GAAW3B,EAAS9B,kBACnB,CAACZ,IAOJ,MAAO,CAAEJ,eAAcE,aAAY0E,YALf,SAACC,EAAWC,GAC9BhC,EAAShC,YAAU+D,IACnB/B,EAASjC,aAAQ,KAG6BR,aErBnC0E,EAnBY,WAAO,IAAD,EAC6BZ,IAApDnE,EADuB,EACvBA,aAAcE,EADS,EACTA,WAAY0E,EADH,EACGA,YAAavE,EADhB,EACgBA,SAE/C,OACE,eAAC4C,EAAD,WACE,cAAC,EAAD,CAAajD,aAAcA,EAAe,IAC1C,cAACoD,EAAD,CAAc/C,SAAUA,EAAUiD,OAAQpD,EAA1C,SACG,YAAI6D,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAClB,cAACX,EAAD,CACElD,SAAUA,EACV2C,QAAS,SAAC8B,GAAD,OAAOF,EAAYV,EAAOY,KAC9B,eAAiBZ,YCgCnBc,EApCQ,WACrB,IAAMlC,EAAWC,cACXkC,EAAYC,iBAA8B,MAC1C/E,EAAc2D,YAAYrC,KAC1BzB,EAAe8D,YAAYvC,KAC3BjB,EAAewD,YAAYlC,KAC3B7B,EAAc+D,YAAYtC,KA2BhC,OAzBA4C,qBAAU,WACkB,OAAtBa,EAAUE,UAEVpF,IAAgBC,GAClBqE,iBAAM,kBAAMvB,EAASjC,aAAQ,MAAuB,IAAfb,EAAsB,KAG7DG,EAAYuE,OAAM,SAACC,EAAMT,GAEvB,IAAMkB,EAA2BH,EAAUE,QAAQ1C,SAASkC,GACtDU,EAA0B,KAAbnB,EAAQ,GAAY,IACjCoB,EAAWD,EAAY,IAG7B,OAF6BrF,GAAckE,GAGzCG,iBAAM,kBAAMvB,EAASjC,aAAQ,MAAQwE,IAC9B,IAGThB,iBAAM,WAAee,EC9BjBG,MAAMC,WAAa,SD8BSH,GAChChB,iBAAM,WAAee,ECnCjBK,gBAAgB,WDmCYH,IACzB,SAER,CAACtF,EAAcM,IAEX,CAAEN,eAAciF,cEzBVS,GAfU,WAAO,IAAD,EACOV,IAA5BhF,EADqB,EACrBA,aAAciF,EADO,EACPA,UAEtB,OACE,eAAChC,EAAD,WACE,cAAC,EAAD,CAAajD,aAAcA,IAC3B,cAACkD,EAAD,CAAYyC,IAAKV,EAAjB,SACG,YAAIlB,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAClB,cAACf,EAAD,GAAiB,aAAee,YCF3BwB,GARU,WACvB,OACE,cAAClC,EAAD,UACE,cAACC,EAAD,0BCKSmC,GARA,WACb,IAAM7F,EAAc+D,YAAYtC,KAIhC,MAAO,CAAEqE,MAHY/B,YAAYvC,KACJxB,ICoBhB+F,GAnBa,WAAO,IACzBD,EAAUD,KAAVC,MACR,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,UACGA,EACC,cAACE,GAAD,IAEA,qCACE,cAAC,GAAD,IACA,cAAC,EAAD,aCZNC,GAAOC,gBAAK,kBAAM,gCAaTC,GAXQ,WACrB,IAAMpG,EAAagE,YAAYxC,KAC/B,OACE,cAAC,EAAD,UACE,cAAC,WAAD,CAAU6E,SAAU,mDAApB,SACGrG,EAAa,cAACsG,GAAD,IAAgB,cAACJ,GAAD,SCbvB,OAA0B,uC,66BCGzC,IAwCeK,GAxCKC,YAAH,KAiBWd,ICHbe,OAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,IAAD,CAAU3E,MAAOA,EAAjB,SACE,cAAC,GAAD,UCCY4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCZNC,EAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,oBAAqB,UAAW,iBAI/CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.544ddd40.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { IState, IGameSliceState } from 'types';\n\nconst initialState: IGameSliceState = {\n  isLaunched: false,\n  totalRounds: 5,\n  currentRound: 1,\n  lastSuccessRound: 1,\n  isUserTurn: false,\n  randomArray: [],\n  userArray: [],\n  isFailed: false,\n  shouldChange: true,\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    start: (state, action) => {\n      state.isLaunched = true;\n      state.totalRounds = action.payload.totalRounds;\n      state.randomArray = action.payload.randomArray;\n    },\n    reset: (state) => {\n      state.isLaunched = false;\n      state.userArray = [];\n      state.currentRound = 1;\n      state.lastSuccessRound = 1;\n    },\n    setTurn(state, action) {\n      state.isUserTurn = action.payload;\n    },\n    userClick(state, action) {\n      state.userArray.push(action.payload);\n    },\n    success: (state) => {\n      state.lastSuccessRound = state.currentRound;\n      state.currentRound = state.currentRound + 1;\n      state.isUserTurn = false;\n      state.userArray = [];\n    },\n    fail: (state) => {\n      state.currentRound = state.lastSuccessRound;\n      state.isUserTurn = false;\n      state.userArray = [];\n      state.isFailed = true;\n      state.shouldChange =\n        state.lastSuccessRound === state.currentRound ? !state.shouldChange : state.shouldChange;\n    },\n    resetFailed: (state) => {\n      state.isFailed = false;\n    },\n  },\n});\n\nexport const { start, reset, setTurn, userClick, success, fail, resetFailed } = gameSlice.actions;\n\nexport const selectIsUserTurn = (state: IState<IGameSliceState>) => state.game.isUserTurn;\n\nexport const selectIsLaunched = (state: IState<IGameSliceState>) => state.game.isLaunched;\n\nexport const selectCurrentRound = (state: IState<IGameSliceState>) => state.game.currentRound;\nexport const selectTotalRounds = (state: IState<IGameSliceState>) => state.game.totalRounds;\n\nexport const selectRandomArray = (state: IState<IGameSliceState>) => state.game.randomArray;\nexport const selectUserArray = (state: IState<IGameSliceState>) => state.game.userArray;\n\nexport const selectIsFailed = (state: IState<IGameSliceState>) => state.game.isFailed;\nexport const selectShouldChange = (state: IState<IGameSliceState>) => state.game.shouldChange;\n\nexport default gameSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameReducer from 'slices/gameSlice';\n\nconst store = configureStore({\n  reducer: {\n    game: gameReducer,\n  },\n});\n\nexport default store;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n`;\n\nexport const Logo = styled.img`\n  width: 338px;\n  height: 97px;\n`;\n\nexport const Header = styled.h1`\n  font-size: 7.2rem;\n  margin-top: 1rem;\n  text-transform: uppercase;\n`;\n\nexport const FigureGreen = styled.img`\n  position: absolute;\n`;\n","export default __webpack_public_path__ + \"static/media/logo.fcde088b.svg\";","import React from 'react';\nimport { Container, Logo, Header } from './Wrapper.styles';\nimport logo from '../../images/logo.svg';\n\nconst Wrapper: React.FC = ({ children }) => {\n  return (\n    <Container>\n      <Logo src={logo} />\n      <Header>Simon Says</Header>\n\n      {children}\n    </Container>\n  );\n};\n\nexport default Wrapper;\n","import styled from 'styled-components';\n\nexport const Button = styled.div`\n  font-size: 3.2rem;\n  font-weight: 700;\n  padding: 0.5rem 1rem;\n  border: 2.5px solid #ffffff;\n  border-radius: 5px;\n  background: transparent;\n  text-align: center;\n  cursor: pointer;\n  text-transform: uppercase;\n  max-width: 200px;\n  align-self: flex-end;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button } from './ResetButton.styles';\nimport { reset } from 'slices/gameSlice';\n\nconst ResetButton: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const handleSumbit = () => {\n    dispatch(reset());\n  };\n\n  return <Button onClick={handleSumbit}>Reset</Button>;\n};\n\nexport default ResetButton;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1140px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  aligin-items: center;\n`;\n\nexport const Wrapper = styled(Container)`\n  flex-direction: row;\n  justify-content: space-around;\n  flex-wrap: wrap;\n`;\n","import styled from 'styled-components';\n\nexport const BoxContainer = styled.div`\n  max-width: 300px;\n  width: 100%;\n  background: #a4a3a3;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 5px;\n  box-shadow: 0px 0px 10px 14px rgba(0, 0, 0, 0.75);\n  margin-top: 30px;\n  height: 350px;\n`;\n\nexport const ScreenGrid = styled.div`\n  padding: 3px;\n  background: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 50px 50px;\n  gap: 3px 3px;\n  grid-template-areas:\n    '. . . . '\n    '. . . . '\n    '. . . . '\n    '. . . . ';\n`;\n\nexport const ScreenItem = styled.div`\n  background: #000;\n  width: 50px;\n  height: 50px;\n`;\n\nexport const KeyboardGrid = styled(ScreenGrid)<{ active: boolean | undefined; isFailed: boolean }>`\n  pointer-events: ${(props) => (props.active ? 'auto' : 'none')};\n  cursor: ${(props) => (props.active ? 'pointer' : 'not-allowed')};\n  background: transparent;\n  gap: 5px 5px;\n  position: relative;\n  &:after {\n    display: ${(props) => (props.isFailed ? 'block' : 'none')};\n    cursor: ${(props) => (props.isFailed ? 'not-allowed' : 'pointer')};\n    content: '';\n    position: absolute;\n    background-color: rgba(255, 0, 0, 0.8);\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 2;\n  }\n`;\n\nexport const KeyboardItem = styled.div<{ isFailed: boolean }>`\n  background-image: radial-gradient(circle farthest-corner at 10% 20%, gray 0%, rgb(5, 5, 5) 82.8%);\n  border: 1px solid black;\n  box-shadow: 0px 0px 7px 1px rgba(0, 0, 0, 0.75);\n\n  width: 50px;\n  height: 50px;\n  &:active,\n  &:focus {\n    transform: scale(1.1);\n    background: blue;\n  }\n`;\n\nexport const WinnerWrapper = styled.div`\n  background: #000;\n  border: 3px solid #ffffff;\n  padding: 5rem;\n  margin-top: 2rem;\n`;\n\nexport const WinnerHeader = styled.p`\n  font-size: 10rem;\n  font-weight: bold;\n  text-align: center;\n`;\n","import styled from 'styled-components';\n\nexport const ProgressGrid = styled.div`\n  margin-top: 10px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  grid-template-rows: 35px 50px;\n  gap: 5px 12px;\n  grid-template-areas:\n    '. . . . .'\n    '. . . . .';\n`;\n\nexport const ProgressItem = styled.div<{ active: boolean }>`\n  background: ${(props) =>\n    props.active\n      ? 'radial-gradient(circle, rgba(152,152,152,1) 1%, rgba(0,0,0,1) 79%)'\n      : 'radial-gradient(circle, rgba(9, 189, 45, 1) 1%, rgba(0, 0, 0, 1) 70%)'};\n  width: 35px;\n  height: 35px;\n  border-radius: 50%;\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectTotalRounds } from 'slices/gameSlice';\nimport { ProgressGrid, ProgressItem } from './ProgressBar.styles';\n\ninterface IProps {\n  readonly currentRound: number;\n}\n\nconst ProgressBar: React.FC<IProps> = ({ currentRound }) => {\n  const totalRounds = useSelector(selectTotalRounds);\n\n  return (\n    <ProgressGrid>\n      {[...Array(totalRounds)].map((x, index) => (\n        <ProgressItem active={currentRound < index + 1} key={'progressItem' + index} />\n      ))}\n    </ProgressGrid>\n  );\n};\n\nexport default ProgressBar;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectCurrentRound,\n  selectRandomArray,\n  selectUserArray,\n  selectIsFailed,\n  setTurn,\n  userClick,\n  success,\n  fail,\n  resetFailed,\n  selectIsUserTurn,\n} from 'slices/gameSlice';\nimport { compareArray } from 'helpers/compareArray';\nimport { delay } from 'lodash';\n\nconst useKeyboard = () => {\n  const dispatch = useDispatch();\n  const userArray = useSelector(selectUserArray);\n  const randomArray = useSelector(selectRandomArray);\n  const isUserTurn = useSelector(selectIsUserTurn);\n  const currentRound = useSelector(selectCurrentRound);\n  const isFailed = useSelector(selectIsFailed);\n\n  useEffect(() => {\n    delay(() => dispatch(resetFailed()), 1500);\n  }, [isFailed]);\n\n  useEffect(() => {\n    if (userArray.length === 0) return;\n    const isValid = compareArray(userArray, randomArray);\n    isValid || dispatch(fail());\n\n    dispatch(setTurn(true));\n\n    if (userArray.length < currentRound) return;\n    isValid && dispatch(success());\n  }, [userArray]);\n\n  const handleClick = (i: number, e: unknown) => {\n    dispatch(userClick(i));\n    dispatch(setTurn(false));\n  };\n\n  return { currentRound, isUserTurn, handleClick, isFailed };\n};\n\nexport default useKeyboard;\n","export const compareArray = (userArr: number[], randArr: number[]) =>\n  userArr.every((item, index) => {\n    return randArr[index] === userArr[index];\n  });\n","import React from 'react';\nimport { BoxContainer, KeyboardGrid, KeyboardItem } from './Box.styles';\nimport ProgressBar from '../ProgressBar/ProgressBar';\nimport useKeyboard from 'hooks/useKeyboard';\n\nconst Keyboard: React.FC = () => {\n  const { currentRound, isUserTurn, handleClick, isFailed } = useKeyboard();\n\n  return (\n    <BoxContainer>\n      <ProgressBar currentRound={currentRound - 1}></ProgressBar>\n      <KeyboardGrid isFailed={isFailed} active={isUserTurn}>\n        {[...Array(16)].map((x, index) => (\n          <KeyboardItem\n            isFailed={isFailed}\n            onClick={(e) => handleClick(index, e)}\n            key={'keyboardItem' + index}\n          />\n        ))}\n      </KeyboardGrid>\n    </BoxContainer>\n  );\n};\n\nexport default Keyboard;\n","import { useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectCurrentRound,\n  selectRandomArray,\n  setTurn,\n  selectShouldChange,\n  selectTotalRounds,\n} from 'slices/gameSlice';\nimport { delay } from 'lodash';\nimport { checkTurn, hideItem, showItem } from 'helpers/animeScreen';\n\nconst useAnimeScreen = () => {\n  const dispatch = useDispatch();\n  const screenRef = useRef<HTMLDivElement | null>(null);\n  const randomArray = useSelector(selectRandomArray);\n  const currentRound = useSelector(selectCurrentRound);\n  const shouldChange = useSelector(selectShouldChange);\n  const totalRounds = useSelector(selectTotalRounds);\n\n  useEffect(() => {\n    if (screenRef.current === null) return;\n\n    if (totalRounds === currentRound) {\n      delay(() => dispatch(setTurn(true)), currentRound * 1000 + 1000);\n    }\n\n    randomArray.every((item, index) => {\n      //@ts-ignore\n      const currItem: HTMLDivElement = screenRef.current.children[item];\n      const delayTime = (index + 1) * 1000 + 500;\n      const hideTime = delayTime + 500;\n      const isUserTurn = checkTurn(currentRound, index);\n\n      if (isUserTurn) {\n        delay(() => dispatch(setTurn(true)), delayTime);\n        return false;\n      }\n\n      delay(() => showItem(currItem), delayTime);\n      delay(() => hideItem(currItem), hideTime);\n      return true;\n    });\n  }, [currentRound, shouldChange]);\n\n  return { currentRound, screenRef };\n};\n\nexport default useAnimeScreen;\n","export const checkTurn = (currRound: number, currKey: number): boolean => {\n  return currRound <= currKey;\n};\n\nexport const hideItem = (element: HTMLDivElement): void => {\n  element.removeAttribute('style');\n};\n\nexport const showItem = (element: HTMLDivElement): void => {\n  element.style.background = 'blue';\n};\n","import React from 'react';\nimport { BoxContainer, ScreenGrid, ScreenItem } from './Box.styles';\nimport ProgressBar from '../ProgressBar/ProgressBar';\nimport useAnimeScreen from 'hooks/useAnimeScreen';\n\nconst Screen: React.FC = () => {\n  const { currentRound, screenRef } = useAnimeScreen();\n\n  return (\n    <BoxContainer>\n      <ProgressBar currentRound={currentRound} />\n      <ScreenGrid ref={screenRef}>\n        {[...Array(16)].map((x, index) => (\n          <ScreenItem key={'screenItem' + index} />\n        ))}\n      </ScreenGrid>\n    </BoxContainer>\n  );\n};\n\nexport default Screen;\n","import React from 'react';\nimport { WinnerWrapper, WinnerHeader } from './Box.styles';\n\nconst Screen: React.FC = () => {\n  return (\n    <WinnerWrapper>\n      <WinnerHeader>You won!</WinnerHeader>\n    </WinnerWrapper>\n  );\n};\n\nexport default Screen;\n","import { useSelector } from 'react-redux';\nimport { selectCurrentRound, selectTotalRounds } from 'slices/gameSlice';\n\nconst useWin = () => {\n  const totalRounds = useSelector(selectTotalRounds);\n  const currentRound = useSelector(selectCurrentRound);\n  const isWin = currentRound > totalRounds;\n\n  return { isWin };\n};\n\nexport default useWin;\n","import React from 'react';\n\nimport ResetButton from './ResetButton/ResetButton';\nimport { Container, Wrapper } from './GameBoard.styles';\nimport { Screen, Keyboard, Winner } from './Box';\nimport useWin from 'hooks/useWin';\n\nconst Gameboard: React.FC = () => {\n  const { isWin } = useWin();\n  return (\n    <Container>\n      <ResetButton />\n      <Wrapper>\n        {isWin ? (\n          <Winner />\n        ) : (\n          <>\n            <Screen />\n            <Keyboard />\n          </>\n        )}\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Gameboard;\n","import React, { lazy, Suspense } from 'react';\nimport { useSelector } from 'react-redux';\nimport Wrapper from 'components/Wrapper/Wrapper';\nimport { selectIsLaunched } from 'slices/gameSlice';\nimport GameBoard from 'components/GameBoard/GameBoard';\n\nconst Menu = lazy(() => import('components/Menu/Menu'));\n\nconst Game: React.FC = () => {\n  const isLaunched = useSelector(selectIsLaunched);\n  return (\n    <Wrapper>\n      <Suspense fallback={<h1>Game loading ... </h1>}>\n        {isLaunched ? <GameBoard /> : <Menu />}\n      </Suspense>\n    </Wrapper>\n  );\n};\n\nexport default Game;\n","export default __webpack_public_path__ + \"static/media/background.bbbd1b44.png\";","import { createGlobalStyle } from 'styled-components';\nimport background from '../images/background.png';\n\nconst GlobalStyle = createGlobalStyle`  \n  *, *::before, *::after {\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  html {\n    font-size: 62.5%; \n  }\n  \n  body {\n    overflow-x: hidden;\n    font-size: 1.6rem;\n    font-family: 'Amatic SC', cursive, sans-serif;\n    color: #fff;\n    background: #000;\n    background-image: url(${background});\n    background-size: contain;\n    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);\n  }\n\n  body::-webkit-scrollbar {\n    width: 0.5em;\n  }\n\n  body::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.2);\n  }\n\n  body::-webkit-scrollbar-thumb {\n    border-radius: 100px;\n    background-color: darkgrey;\n    outline: 1px solid slategrey;\n  }\n  button {\n    outline: none!important;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from 'store';\nimport Game from 'pages/Game';\nimport GlobalStyle from 'theme/GlobalStyle';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Provider store={store}>\n        <Game />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Amatic SC:400,700', 'cursive', 'sans-serif'],\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}